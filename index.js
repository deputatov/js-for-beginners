'use strict'

/*
ECMAScript выступает в качестве основы для построения скриптовых языков
Спецификация языка находится тут => https://tc39.es/ecma262/
Примеры приведенные в файле "работают так" в соответствии c правилами описанными в спецификации
одно их них описано тут => https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator
*/

'' + 1 + 0 === '10'
/*
В выражении отсутствуют математические операторы с более высоким приоритетом поэтому всё
выражение выполняется слева на право.
Оператор сложения выполняется слева на право поэтому сначала выполняется выражение
'' + 1
Согласно правилу https://tc39.es/ecma262/#sec-applystringornumericbinaryoperator
происходит приведение левого операнда и правого операнда к примитивному типу в спецификации
указан оператор toPrimitive т.к. значения обоих операндов уже являются примитивами 
преобразований не происходит возвращаются значения 
Поскольку один из операндов это строка, оператор + вызовет строковое преобразование числа 1 
и последующую конкатенацию двух строк. На следующем этапе выражение "1" + 0 выполнится таким же образом.
в результате получим "10"
'' + 1 + 0
=> '1' + 0
==> '10'
*/

'' - 1 + 0 === -1;
/*
Алгоритм выполнения аналогичен описанному выше, только оператор "-" вызывает численное преобразование
для '' который равен 0
'' - 1 + 0
=> -1 + 0
==> -1
*/

true + false === 1;
/*
Бинарный оператор "+" вызывает численное преобразование для true и false
true + false
=> 1 + 0
==> 1
*/

6 / "3" === 2;
/*
Оператор деления "/" вызывает численное преобразование строки "3"
6 / "3"
=> 6 / 3
==> 2
*/

'2' * '3' === 6;
/*
Оператор умножение "*" вызывает численное преобразование для строки '2' и '3'
'2' * '3'
=> 2 * 3
==> 6
*/

4 + 5 + 'px'=== '9px';
/*
9 + 'px'
Оператор сложения "+" вызывает строковое преобразование для числа 9
=> 9 + 'px'
==> '9px'
*/

'$' + 4 + 5 === '$45';
/*
Оператор сложения "+" вызывает строковое преобразование для числа 4 и 5
=> '$4' + 5
==> '$45'
*/

'4' - 2 === 2;
/*
Оператор вычитания "-" вызывает численное преобразование для строки '4'
=> 4 - 2
==> 2
*/

'4px' - 2 === NaN;
/*
Оператор "-" вызывает численное преобразование для строки '4px' так как эта строка не представляет собой
корректное число результатом будет NaN, NaN - 2 = NaN
=> NaN - 2
==> NaN
*/

7 / 0 === Infinity;
/*
В соответствии с правилом спецификации => https://tc39.es/ecma262/#sec-numeric-types-number-divide
при делении на ноль положительно числа Infinity, отрицательного -Infinity
*/

'  -9  ' + 5 === '  -9  5';
/*
Оператор сложения "+" вызывает строковое преобразование для числа 5
=> '  -9  5'
*/

'  -9  ' - 5 === -14;
/*
Оператор вычитания "-" вызывает численное преобразование для строки '  -9  '
=> -9 - 5
==> -14
*/

null + 1 === 1;
/*
Оператор сложение "+" вызывает численное преобразование для null в соответствии с этим правилом
https://tc39.es/ecma262/#sec-tonumber
=> 0 + 1
==> 1
*/

undefined + 1 === NaN;
/*
Оператор сложение "+" вызывает численное преобразование для undefined в соответствии с этим правилом
https://tc39.es/ecma262/#sec-tonumber
=> NaN + 1
==> NaN
*/

' \t \n' - 2 === -2;
/*
Оператор вычитания "-" вызывает численное преобразование для строки ' \t \n'
=> 0 - 2
==> -2
*/

'' + undefined === 'undefined';
/*
Оператор сложения "+" вызывает строковое преобразование для undefined
в соответствии с этим правилом https://tc39.es/ecma262/#sec-tostring
после чего происходит конкатенация строк
=> '' + 'undefined'
==> 'undefined'
*/

'1' - 1 === 0;
/*
Оператор вычитания "-" вызывает численное преобразование для строки '1'
=> 1 - 1
==> 0
*/

'1' + -1 === '1-1';
/*
Оператор сложения "+" вызывает строковое преобразование для -1
=> '1' + '-1'
==> '1-1'
*/